#!/usr/bin/env python3

import os
import webbrowser
import sys
import json
import folium
import pandas as pd
import datetime as dt
import numpy as np


filename = sys.argv[1] # parsed nmea data in json formatted file.

def process_file(filename):
    data = []
    keys = ['mmsi', 'name', 'lat', 'lon', 'year', 'month', 'day', 'hour', \
        'minute', 'second']
    with open(filename) as lines:
        for item in lines:
            zerodeal = False
            element = {}
            q = json.loads(item)
            for key in keys:
                if key not in q:
                    if key == 'name':
                        element['name'] = 'Noname'
                    else:
                        zerodeal = True
                        break
                if key in q:
                    element[key] = q[key]
            if zerodeal == False:
                data.append(element)
    d = pd.DataFrame.from_dict(data)
    return d

df = process_file(filename)
if df.empty:
    print('Not enough data for mapping...')
    exit()

# For testing
# print(df)

# set up map parameters
minlon = df['lon'].min()
maxlon = df['lon'].max()
minlat = df['lat'].min()
maxlat = df['lat'].max()
extent = [minlon, maxlon, minlat, maxlat]
centerlat = np.mean(extent[2:])  # center of map, lat
centerlon = np.mean(extent[:2])  # center of map, lon

# center the map
MAPCENTER = [centerlat, centerlon]

# build the map
map_ais = folium.Map(location=MAPCENTER, zoom_start=12, tiles='cartodbpositron', \
            width=640, height=480)

for i in range(0, len(df)):
    folium.Marker(location=[df.iloc[i]['lat'], df.iloc[i]['lon']], \
                  popup=[df.iloc[i]['mmsi'],df.iloc[i]['name']], fill_color='#43d9de', radius=8).add_to(map_ais)

map_ais.save('map.html')
webbrowser.open('map.html')
